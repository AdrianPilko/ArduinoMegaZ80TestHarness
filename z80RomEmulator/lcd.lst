0001   0000             ;
0002   0000             ; code from bread80.com didn't work, it relied on slow arduino clock
0003   0000             ; also the port numbers look wrong.
0004   0000             
0005   0000             ; the wiring is as such on my version of the computer (https://github.com/AdrianPilko/Z80-computer)
0006   0000             ;;the lcd E pin (enable) is NAND'd with the pin 15 of the U4 74ls138,
0007   0000             ;;    --> the U4 (74ls138) pin A0 pin 1 is connected to Z80 A5
0008   0000             ;;    --> the U4 (74ls138) pin A1 pin 2 is connected to Z80 A6
0009   0000             ;;    --> U4 (74ls138) pin A2 pin 3 is connected to Z80 A7
0010   0000             ;; The Z80 A0 is connected to the RS(register select) pin on the lcd display
0011   0000             ;; The Z80 /RD (active low RD pin) NAND'd and connected to the R/W pin
0012   0000             
0013   0000             ;; datasheet for the lcd display: https://www.sparkfun.com/datasheets/LCD/HD44780.pdf
0014   0000             ;; this all means:
0015   0000             ;;     to write to the display as a commands RS has to be set to 0
0016   0000             ;;     to write to the display as a data RS has to be set to 1
0017   0000             ;;     we don't need to worry about the R/W pin (enable as that's handled by NAND'd /RD)
0018   0000             ;;     we have to set the output port address to A5 high A6 low and A7 Low, the others apart from A0 fdon't matter
0019   0000             
0020   0000             #define lcdRegisterSelectCommand $00
0021   0000             #define lcdRegisterSelectData $01
0022   0000             #define lcdEnableAddress $10    ; address pin 5 high on all other address set to zero, z80 only uses 255 ports with in/out instruction (8bit)
0023   0000             #define enableLCDANDRSCommand $10
0024   0000             #define enableLCDANDRSData $11
0025   0000                 
0026   0000                 .org 0
0027   0000                 
0028   0000 3E 3F           ld a, $3f ; 8bit interface
0029   0002 D3 10           out (enableLCDANDRSCommand), a
0030   0004 06 FF           ld b, $ff   ; delay toop
0031   0006             delay1:
0032   0006 3E 55           ld a, $55   ; waste some clock cycles
0033   0008 80              add a, b
0034   0009 10 FB           djnz delay1
0035   000B             
0036   000B 3E 0F           ld a,$0f    ; display on, cursor on
0037   000D D3 10           out (enableLCDANDRSCommand), a
0038   000F             
0039   000F 06 FF           ld b, $ff   ; delay toop
0040   0011             delay2:
0041   0011 3E 55           ld a, $55   ; waste some clock cycles
0042   0013 80              add a, b
0043   0014 10 FB           djnz delay2
0044   0016             
0045   0016 3E 01           ld a, $01    ; clear    
0046   0018 D3 10           out (enableLCDANDRSCommand), a
0047   001A             
0048   001A 06 FF           ld b, $ff   ; delay toop
0049   001C             delay3:
0050   001C 3E 55           ld a, $55   ; waste some clock cycles
0051   001E 80              add a, b
0052   001F 10 FB           djnz delay3
0053   0021             
0054   0021 3E 06           ld a, $06    ; left to right
0055   0023 D3 10           out (enableLCDANDRSCommand), a
0056   0025             
0057   0025 06 FF           ld b, $ff   ; delay toop
0058   0027             delay4:
0059   0027 3E 55           ld a, $55   ; waste some clock cycles
0060   0029 80              add a, b
0061   002A 10 FB           djnz delay4
0062   002C             
0063   002C 21 42 00        ld hl, HELLO ; load address of first character in hello world
0064   002F                 
0065   002F             writeTextLoop:    
0066   002F 7E              ld a, (hl)
0067   0030 FE FF           cp $ff
0068   0032 CA 41 00        jp z, endProgram
0069   0035 D3 11           out (enableLCDANDRSData), a
0070   0037 23              inc hl
0071   0038             
0072   0038 06 FF           ld b, $ff   ; delay toop
0073   003A             delay5:
0074   003A 3E 55           ld a, $55   ; waste some clock cycles
0075   003C 80              add a, b
0076   003D 10 FB           djnz delay5
0077   003F             
0078   003F 18 EE           jr writeTextLoop
0079   0041             
0080   0041             endProgram:
0081   0041 76              halt   
0082   0042             
0083   0042             HELLO:    
0084   0042 48 65 6C 6C     .db "Hello, world",$ff
0084   0046 6F 2C 20 77 
0084   004A 6F 72 6C 64 
0084   004E FF 
0085   004F             #END    
tasm: Number of errors = 0
